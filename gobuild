#!/bin/bash

GOBUILD_VER="2.1.0"

function startup() {
  cwd=$(pwd)
  script_dir=$(dirname $0)
  if [ ! -f ${script_dir}/cfg/defaults.cfg ];
  then
    echo "defaults.cfg file missing. It should be in ${script_dir}/cfg"
    exit 3
  fi
  . ${script_dir}/cfg/defaults.cfg
}

function init() {
  # Retrieve appversion and subbuild from main.go
  appversion=$(${GREP} "appversion.*string" ${MAIN_PACKAGE_DIR}/main.go | ${SED} -e 's/.*= //g' -e 's/\"//g')
  subbuild=$(${GREP} "subbuild.*string" ${MAIN_PACKAGE_DIR}/main.go | ${SED} -e 's/.*= //g' -e 's/\"//g')

  # Retrieve values for parameters in main.go
  if [ -f ${MAIN_PACKAGE_DIR}/buildnr ];
  then
    buildnr=$(cat ${MAIN_PACKAGE_DIR}/buildnr)
  else
    buildnr=-1
  fi
  buildnr=$((buildnr + 1))
  builddate=$(date +"%Y-%m-%d %H:%M:%S")
  builduser=$(whoami)@$(hostname --fqdn)
  linuxos=$(uname -sn)
  linuxver=$(uname -r)
}

function loadConfig() {
  if [ "${CONFIGFILE}" == "" ];
  then
    showHelp
  fi
  locations="${cwd}/cfg ${HOME}/.config/gobuilder ${script_dir}/cfg /etc/gobuilder"
  found=0
  if [ -f ${CONFIGFILE} ];
  then
    ${ECHO} "Loading configuration from ${CONFIGFILE}"
    . ${CONFIGFILE}
    found=1
  else
    for location in ${locations};
    do
      if [ ${found} -eq 0 ];
      then
        if [ -f ${location}/${CONFIGFILE} ];
        then
          ${ECHO} "Loading configuration from ${location}/${CONFIGFILE}"
          . ${location}/${CONFIGFILE}
          found=1
        fi
      fi
    done
  fi
  if [ ${found} -eq 0 ];
  then
    ${ECHO} "Gobuilder v${GOBUILD_VER}"
    ${ECHO} "Unable to find configuration file ${CONFIGFILE}"
    ${ECHO} "The following paths have been checked:"
    ${ECHO} "  ${CONFIGFILE}"
    for location in ${LOCATIONS};
    do
      ${ECHO} "  ${location}/${CONFIGFILE}"
    done
    exit 2
  fi
}

function showHelp() {
  if [ "${CONFIGFILE}" == "" ];
  then
    ${ECHO} "The -c parameter is required"
  fi
  if [ $# -gt 0 ];
  then
    ${ECHO} "Unknown option: $1"
  fi
  ${ECHO} "Gobuilder v${GOBUILD_VER}"
  ${ECHO} "Usage: $0 -c app_config.cfg [-e GOOS:GOARCH] [-V package@version ] [-lqvw]"
  ${ECHO} "       $0 -h"
  ${ECHO} "       $0 -s"
  ${ECHO} "  -c app_config.cfg   The configuration file to use for this build. Gobuild will look for"
  ${ECHO} "                      this file in the following locations, in order:"
  ${ECHO} "                        ${HOME}/.config/gobuilder"
  ${ECHO} "                        ${cwd}/cfg"
  ${ECHO} "                        ${script_dir}/cfg"
  ${ECHO} "                        /etc/gobuilder"
  ${ECHO} "  -e GOOS:GOARCH      Provide an extra OS/architecture to build for"
  ${ECHO} "  -h                  Show this help text"
  ${ECHO} "  -l                  Only build for Linux (amd64 architecture)"
  ${ECHO} "  -q                  Quick build mode. This skips updating dependencies and will not build them"
  ${ECHO} "  -s                  Show Go-supported OS/architecture combinations. Not all combinations"
  ${ECHO} "                      will result in a successful build"
  ${ECHO} "  -v                  Verbose mode. Shows more output"
  ${ECHO} "  -V package@version  Use special version (or branch) for this dependency. Multiple -V parameters are allowed"
  ${ECHO} "  -w                  Only build for Windows (amd64 architecture)"
  cd ${cwd}
  exit 1
}

function showSupported() {
  ${ECHO} "Gobuilder v${GOBUILD_VER}"
  ${ECHO} "Supported OS/architecture combinations"
  ${ECHO} "If your application has special requirements (for example: it only runs"
  ${ECHO} "on a 64-bit architecture), not all these combinations can be used."
  ${ECHO} "You can use these values with the -e option:"
  ${GO} tool dist list | ${SED} -e 's/\//:/g'
  cd ${cwd}
  exit
}

function addSpecialVersion() {
  packagestring="$1"

  SPECIAL_VERSION="${SPECIAL_VERSION} ${packagestring}"
}

function showSpecialVersion() {
  if [ "${SPECIAL_VERSION}" != "" ];
  then
    ${ECHO} "Specific package versions used:"
    for specv in ${SPECIAL_VERSION};
    do
      package=$(${ECHO} ${specv} | ${AWK} -F@ '{print $1}')
      version=$(${ECHO} ${specv} | ${AWK} -F@ '{print $2}')
      ${ECHO} "  Package ${package}: ${version}"
    done
  fi
}

function inSpecialVersion() {
  searchpackage=$1
  result=0
  if [ "${SPECIAL_VERSION}" != "" ];
  then
    for specv in ${SPECIAL_VERSION};
    do
      package=$(${ECHO} ${specv} | ${AWK} -F@ '{print $1}')
      if [ "${searchpackage}" == "${package}" ];
      then
        result=1
      fi
    done
  fi
  echo ${result}
}

function getSpecialVersion() {
  searchpackage=$1

  # Default result when the special version isn't found
  result="main"

  for specv in ${SPECIAL_VERSION};
  do
    package=$(${ECHO} ${specv} | ${AWK} -F@ '{print $1}')
    version=$(${ECHO} ${specv} | ${AWK} -F@ '{print $2}')
    if [ "${searchpackage}" == "${package}" ];
    then
      result=${version}
    fi
  done
  echo ${result}
}

function setSpecialVersion() {
  if [ "${SPECIAL_VERSION}" != "" ];
  then
    for specv in ${SPECIAL_VERSION};
    do
      if [ ${VERBOSE} -eq 0 ];
      then
        ${GO} mod edit -require ${specv} >/dev/null 2>&1
      else
        ${GO} mod edit -require ${specv}
      fi
    done
  fi
}

function isBranch() {
  versionname=$1
  result=tag
  for branch in $(${GIT} branch | ${SED} -e 's/\*//g');
  do
    if [ "${versionname}" == "${branch}" ];
    then
      result=branch
    fi
  done
  echo ${result}
}

function handleParams() {
  # Parameter handling
  while getopts c:e:hlqsvV:w flag;
  do
    if [ ${VERBOSE} -eq 1 ];
    then
      ${ECHO} "Reading parameter ${flag} ${OPTARG}"
    fi
    case "${flag}" in
      c) CONFIGFILE="${OPTARG}";;
      e) BUILDS="${BUILDS} ${OPTARG}";;
      h) showHelp;;
      l) BUILDS="linux:amd64";;
      q) QUICK=1;;
      s) showSupported;;
      v) VERBOSE=1;;
      V) addSpecialVersion "${OPTARG}";;
      w) BUILDS="windows:amd64";;
      *) showHelp "${flag}";;
    esac
  done
}

function getDepPackages() {
  ${ECHO} "Determining dependencies..."
  DEPPKG=$(${CAT} go.mod | ${SED} -e '/^$/d' -e '/^.$/d' | ${GREP} -v 'module\|go\|require' | ${AWK} '{print $1}')
  for package in ${DEPPKG};
  do
    vertype=""
    specver=""
    if [ $(inSpecialVersion ${package}) -eq 1 ];
    then
      specver=$(getSpecialVersion ${package})
      vertype=$(isBranch ${specver})
      ${GO} get ${package}@${specver}
    else
      ${GO} get ${package}@main
    fi
  done
}

function updateModuleDeps() {
  ${ECHO} "Updating ${APPLICATION_NAME} module dependencies..."
  rm -f go.mod go.sum
  if [ ${VERBOSE} -eq 1 ];
  then
    ${GO} mod init ${MAIN_PACKAGE}
  else
    ${GO} mod init ${MAIN_PACKAGE} >/dev/null 2>&1 
  fi
  setSpecialVersion
  if [ ${VERBOSE} -eq 1 ];
  then
    ${GO} mod tidy
  else
    ${GO} mod tidy >/dev/null 2>&1
  fi
  getDepPackages
}

function buildMain() {
  for build in ${BUILDS};
  do
    cd ${MAIN_PACKAGE_DIR}
    BUILDOS=$(${ECHO} ${build} | ${AWK} -F: '{print $1}')
    BUILDARCH=$(${ECHO} ${build} | ${AWK} -F: '{print $2}')
    if [ ! -d ${BIN_DIR} ];
    then
      if [ ${VERBOSE} -eq 1 ];
      then
        ${ECHO} "Creating ${BIN_DIR}"
      fi
      ${MKDIR} -p ${BIN_DIR}
    fi
    if [ ${VERBOSE} -eq 1 ];
    then
      ${ECHO} "Creating binary output directory ${BIN_DIR}/${BUILDOS}/${BUILDARCH}"
    fi
    ${MKDIR} -p ${BIN_DIR}/${BUILDOS}/${BUILDARCH}
    ${ECHO} ""
    ${ECHO} "Building ${APPLICATION_NAME} for OS ${BUILDOS}, architecture ${BUILDARCH}"
    if [ ${VERBOSE} -eq 1 ];
    then
      if [ ${QUICK} -eq 0 ];
      then
        env GOOS=${BUILDOS} GOARCH=${BUILDARCH} ${GO} build -v -a -ldflags "-X 'main.buildnr=${buildnr}' -X 'main.builddate=${builddate}' -X 'main.builduser=${builduser}' -X 'main.osname=${linuxos}' -X 'main.osversion=${linuxver}'" -o ${BIN_DIR}/${BUILDOS}/${BUILDARCH}
      else
        env GOOS=${BUILDOS} GOARCH=${BUILDARCH} ${GO} build -v -ldflags "-X 'main.buildnr=${buildnr}' -X 'main.builddate=${builddate}' -X 'main.builduser=${builduser}' -X 'main.osname=${linuxos}' -X 'main.osversion=${linuxver}'" -o ${BIN_DIR}/${BUILDOS}/${BUILDARCH}
      fi
    else
      if [ ${QUICK} -eq 0 ];
      then
        env GOOS=${BUILDOS} GOARCH=${BUILDARCH} ${GO} build -a -ldflags "-X 'main.buildnr=${buildnr}' -X 'main.builddate=${builddate}' -X 'main.builduser=${builduser}' -X 'main.osname=${linuxos}' -X 'main.osversion=${linuxver}'" -o ${BIN_DIR}/${BUILDOS}/${BUILDARCH}
      else
        env GOOS=${BUILDOS} GOARCH=${BUILDARCH} ${GO} build -ldflags "-X 'main.buildnr=${buildnr}' -X 'main.builddate=${builddate}' -X 'main.builduser=${builduser}' -X 'main.osname=${linuxos}' -X 'main.osversion=${linuxver}'" -o ${BIN_DIR}/${BUILDOS}/${BUILDARCH}
      fi
    fi
    if [ $? -ne 0 ];
    then
      ${ECHO} "  ERROR: Build for ${BUILDOS}, ${BUILDARCH} failed"
      FAILEDBUILDS=$((FAILEDBUILDS+1))
    fi
  done
}

function main() {
  startup
  handleParams $@
  loadConfig
  init

  ${ECHO} "Gobuilder v${GOBUILD_VER}"
  ${ECHO} "Building ${APPLICATION_NAME} ${appversion}.${buildnr}${subbuild} for ${BUILDS}"
  cd ${MAIN_PACKAGE_DIR}
  if [ ${QUICK} -eq 1 ];
  then
    ${ECHO} "Quick build mode is active"
  fi
  if [ ${VERBOSE} -eq 1 ];
  then
    ${ECHO} "main.buildnr=${buildnr}"
    ${ECHO} "main.builddate=${builddate}"
    ${ECHO} "main.builduser=${builduser}"
    ${ECHO} "main.osname=${linuxos}"
    ${ECHO} "main.osversion=${linuxver}"
  fi

  showSpecialVersion
  ${ECHO} ""
  if [ ${QUICK} -eq 0 ];
  then
    updateModuleDeps
  fi
  buildMain

  ${ECHO} "Build complete. ${FAILEDBUILDS} build(s) failed."
  ${ECHO} ${buildnr} > ./buildnr
  cd ${cwd}
}

main $@